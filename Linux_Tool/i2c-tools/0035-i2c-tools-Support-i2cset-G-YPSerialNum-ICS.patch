From 1579e46b4e17335f8d85f5842c49d84880b8d11c Mon Sep 17 00:00:00 2001
From: matthew_chou <matthew_chou@gemteks.com>
Date: Thu, 30 May 2019 12:07:45 +0800
Subject: [PATCH 35/38] [i2c-tools] Support i2cset -G YPSerialNum/ICS

[Description]
    Support i2cset -G YPSerialNum
            i2cset -G ICS

[Unit test]
     i2cset -G YPSerialNum ALCLFA68472B
     i2cset -G YPSerialNum 0123456789ABCDEF
     i2cset -G ICS 99

Change-Id: Ia3f519f1f90cb7594a7404bb04c016b57ef519e3
---
 userspace/private/apps/i2c-tools/tools/util.c | 100 +++++++++++++++++++++++---
 1 file changed, 89 insertions(+), 11 deletions(-)

diff --git a/userspace/private/apps/i2c-tools/tools/util.c b/userspace/private/apps/i2c-tools/tools/util.c
index 556936d..1b32b88 100644
--- a/userspace/private/apps/i2c-tools/tools/util.c
+++ b/userspace/private/apps/i2c-tools/tools/util.c
@@ -67,22 +67,30 @@ int parse_mac_addr(char *);
 void set_ProgDate(char*,char *,int*);
 void set_ProgDate_help(void);
 int parse_prog_date(char *);
+void set_ICS(char *,char *,int *);
+void set_ICS_help(void);
+int parse_ics(char *);
 void set_HardwareVersion(char *,char *,int *);
 int parse_hardware_version(char *);
 void set_HardwareVersion_help(void);
+void set_YPSerialNum(char *,char *,int *);
+void set_YPSerialNum_help(void);
+int parse_yp_serialnum(char *);
 
 #define MAC_ADDRESS_LEN        6
 #define MAC_STR_ADDRESS_LEN   17
 #define PROG_DATA_LEN          6
 #define HARDWARE_VERSION_LEN  12
+#define YPSERIALNUM_LEN       16
+#define ICS_LEN                2
 
 E2PROM_DATA_MAP nokia_ri[] = {
     {"Format"            ,0x0   ,2  ,CHARACTER_MODE   ,NULL},//0x56 i2c-device (256 bytes)
     {"MfrID"             ,0x2   ,4  ,CHARACTER_MODE   ,NULL},
     {"FactoryCode"       ,0x6   ,2  ,CHARACTER_MODE   ,NULL},
     {"HardwareVersion"   ,0x8   ,12 ,CHARACTER_MODE   ,set_HardwareVersion},
-    {"ICS"               ,0x14  ,2  ,CHARACTER_MODE   ,NULL},
-    {"YPSerialNum"       ,0x16  ,16 ,CHARACTER_MODE   ,NULL},//0x20 *8 ,0x30 *8
+    {"ICS"               ,0x14  ,2  ,CHARACTER_MODE   ,set_ICS},
+    {"YPSerialNum"       ,0x16  ,16 ,CHARACTER_MODE   ,set_YPSerialNum},//0x20 *8 ,0x30 *8
     {"CleiCode"          ,0x26  ,10 ,CHARACTER_MODE   ,NULL},
     {"Mnemonic"          ,0x30  ,8  ,CHARACTER_MODE   ,NULL},
     {"ProgDate"          ,0x38  ,6  ,CHARACTER_MODE   ,set_ProgDate},
@@ -145,7 +153,7 @@ int find_nokia_RI_entry(char *parm){
     return ret;
 }
 void set_MACAddress_help(void){
-    fprintf(stderr,"MACAddress not invalid\n"
+    fprintf(stderr,"MACAddress is not valid\n"
         "Please match the following format: 30:31:32:33:34:35\n");
     exit(1);
 }
@@ -172,13 +180,6 @@ int parse_mac_addr(char *str){
     return ret;
 }
 
-void set_ProgDate_help(void){
-    fprintf(stderr,"ProgDate not invalid\n"
-        "Please match the following format: 160101\n");
-    exit(1);
-}
-
-
 void set_MACAddress(char *data,char *block,int *len){
    int i = 0;
    unsigned char mac[MAC_ADDRESS_LEN] = {0};
@@ -199,6 +200,12 @@ void set_MACAddress(char *data,char *block,int *len){
    }
 }
 
+void set_ProgDate_help(void){
+    fprintf(stderr,"ProgDate is not valid\n"
+        "Please match the following format: 160101\n");
+    exit(1);
+}
+
 int parse_prog_date(char *str){
     int ret = RET_FAILED;
     while( *str ){
@@ -227,8 +234,41 @@ void set_ProgDate(char *data,char *block,int *len){
     }
 }
 
+void set_ICS_help(void){
+    fprintf(stderr,"ICS is not valid\n"
+        "Please match the following format: 01\n");
+    exit(1);
+}
+
+int parse_ics(char *str){
+    int ret = RET_FAILED;
+    while( *str ){
+        if((*str >= '0') && (*str <= '9'))    ret = RET_SUCCESS;
+        else
+            return RET_FAILED;
+        str++;
+    }
+    return ret;
+}
+
+void set_ICS(char *data,char *block,int *len){
+    int i = 0;
+    if( data==NULL || strlen(data)!=ICS_LEN ){
+        set_ICS_help();
+    }
+    else{
+        if(parse_ics(data) == RET_SUCCESS){
+            for( i = 0 ; i < ICS_LEN ; i++ ){
+                block[i] = data[i];
+            }
+            *len = ICS_LEN;
+        }
+        else
+            set_ICS_help();
+    }
+}
 void set_HardwareVersion_help(void){
-    fprintf(stderr,"HardwareVersion not invalid\n"
+    fprintf(stderr,"HardwareVersion is not valid\n"
         "Please match the following format: 3FE47122AAAA\n");
     exit(1);
 }
@@ -263,4 +303,42 @@ void set_HardwareVersion(char *data,char *block,int *len){
             set_HardwareVersion_help();
     }
 }
+
+void set_YPSerialNum_help(void){
+    fprintf(stderr,"YPSerialNum is not valid\n"
+        "Please match the following format: ALCLFA68472B (16 chars max)\n");
+    exit(1);
+}
+
+int parse_yp_serialnum(char *str){
+    int ret = RET_FAILED;
+	 printf("*str is 0x%x = %c\n", *str, *str);
+    while( *str ){
+       if((*str >= '0') && (*str <= '9'))      ret = RET_SUCCESS;
+       else if((*str >= 'a') && (*str <= 'f')) ret = RET_SUCCESS;
+       else if((*str >= 'A') && (*str <= 'F')) ret = RET_SUCCESS;
+       else
+           return RET_FAILED;
+
+       str++;
+    }
+    return ret;
+}
+
+void set_YPSerialNum(char *data,char *block,int *len){
+    int i = 0;
+    if( strlen(data) > YPSERIALNUM_LEN )
+        set_YPSerialNum_help();
+
+    else{
+        if(strlen(data) < YPSERIALNUM_LEN){
+            for( i = 0 ; i < (YPSERIALNUM_LEN-strlen(data)) ; i++ )
+                    block[i] = ' ';
+        }
+        for( i ; i < YPSERIALNUM_LEN ; i++ )
+                block[i] = data[i-(YPSERIALNUM_LEN-strlen(data))];
+
+        *len = YPSERIALNUM_LEN;
+    }
+}
 //#endif //ODM_GEMTEK
-- 
2.7.4

